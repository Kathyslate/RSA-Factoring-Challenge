#!/usr/bin/python3
import gmpy2

def pollards_rho(n, c=1, x0=2):
    """
    Implementation of Pollard's rho algorithm for integer factorization.
    """
    if n % 2 == 0:
        return 2
    x, xx, d, i = x0, x0, 1, 1
    while d == 1:
        x = (pow(x, 2, n) + c) % n
        d = gmpy2.gcd(x - xx, n)
        xx = x
        i += 1
    return d if d != n else pollards_rho(n, c + 1)

def factorize_rsa_number(n):
    """
    Factors an RSA number `n` into its prime factors `p` and `q`.
    """
    p = pollards_rho(n)
    q = n // p
    return p, q

# Read RSA number from file
with open("sys.argv[1]", "r") as f:
    n = int(f.read().strip())

# Factorize the RSA number
p, q = factorize_rsa_number(n)

# Print the prime factors
print(f"{n}={p}*{q}")
